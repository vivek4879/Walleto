package com.amigowallet.dao;


import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.amigowallet.entity.SecurityQuestionEntity;
import com.amigowallet.entity.UserEntity;
import com.amigowallet.model.SecurityQuestion;
import com.amigowallet.model.User;
import com.amigowallet.model.UserStatus;

/**
 * This is a DAO class having methods to perform CRUD operations on user and OTP tables.
 *
 * @author ETA_JAVA
 * 
 */
@Repository(value = "registrationDao")
public class RegistrationDAOImpl implements RegistrationDAO{
	
	/** This is a spring auto-wired attribute used to create data base sessions*/
	@Autowired
	EntityManager entityManager;
	
	/**
	 * This method is used to add a new User to the database<br>
	 * It uses session.save() method to save the entity to the database
	 * 
	 * @param user
	 * 
	 * @return userId
	 */
	@Override
	public Integer addNewUser(User user) {
		
		/*
		 * The properties of userEntity is set by getting the corresponding
		 * properties of the user bean 
		 */		
		UserEntity userEntity = new UserEntity();
		userEntity.setName(user.getName());
		userEntity.setPassword(user.getPassword());
		userEntity.setEmailId(user.getEmailId());
		userEntity.setMobileNumber(user.getMobileNumber());
		userEntity.setSecurityAnswer(user.getSecurityAnswer());
	
		SecurityQuestionEntity securityQuestionEntity = entityManager.find(SecurityQuestionEntity.class, user.getSecurityQuestion().getQuestionId());
		
		if(securityQuestionEntity!=null) {
			userEntity.setSecurityQuestion(securityQuestionEntity);
		}
		/*
		 * The active status is set to the user Entity
		 */
		userEntity.setUserStatus(UserStatus.ACTIVE);
		
		/*
		 * userId is generated by saving the userEntity to the database
		 */
		entityManager.persist(userEntity);
		Integer userId = userEntity.getUserId();
		return userId;	
	}
	
	/**
	 * This method is used for checking whether the email id
	 * is used by an already registered user
	 * 
	 * @param email id
	 * 
	 * @return boolean
	 */
	@Override
	public Boolean checkEmailAvailability(String emailId) {
		
		Query query = entityManager.createQuery("select count(userId) from UserEntity where emailId=:emailId");
		query.setParameter("emailId", emailId.toLowerCase());
		Long value = (Long) query.getSingleResult();
		if(value==0){
			return false;
		}else {
			return true;
		}
	}
	
	/**
	 * This method is used for checking whether the mobile number
	 * is used by an already registered user
	 * 
	 * @param mobileNumber
	 * 
	 * @return boolean
	 */
	@Override
	public Boolean checkMobileNumberAvailability(String mobileNumber) {
		
		Query query = entityManager.createQuery("select count(userId) from UserEntity where mobileNumber=:mobileNumber");
		query.setParameter("mobileNumber", mobileNumber);
		
		Long value = (Long) query.getSingleResult();	
		if(value==0){
			return false;
		}else {
			return true;
		}
	}

	@Override
	@SuppressWarnings("unchecked")
	public ArrayList<SecurityQuestion> getAllSecurityQuestions() {
		
		List<SecurityQuestionEntity> securityQuestionEntities = entityManager.createQuery("from SecurityQuestionEntity").getResultList();	
		
		if(securityQuestionEntities==null){
			return null;
		}else {
			ArrayList<SecurityQuestion> securityQuestions = new ArrayList<>();
			for(SecurityQuestionEntity securityQuestionEntity: securityQuestionEntities) {
				SecurityQuestion securityQuestion = new SecurityQuestion();
				securityQuestion.setQuestionId(securityQuestionEntity.getQuestionId());
				securityQuestion.setQuestion(securityQuestionEntity.getQuestion());
				securityQuestions.add(securityQuestion);
			}
			return securityQuestions;
		}
	}
	
}
